Doctest for class BaseGeometry in module 7-base_geometry. The class contains two public instance methods:
- area(): raises an exception with message 'area() is not implemented'
- integer_validator(): takes two positional arguments, name (always a string; the name of the object teted), and 'value' (the value of the object tested). A TypeError is raised if the object is not an integer A ValueError is raised if the object is an integer less than 1.

=================================================================================

First, import the class BaseGeometry from module 7-base_geometry

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

---------------------------------------------------------------------------------

Test 0: Testing area() with a valid object

>>> bg = BaseGeometry()
>>> bg.area()
Traceback (most recent call last):
          ...
Exception: area() is not implemented
>>>

---------------------------------------------------------------------------------

Test 1: Testing area() with an undefined object

>>> unknown_obj.area()
Traceback (most recent call last):
	  ...
NameError: name 'unknown_obj' is not defined
>>>

---------------------------------------------------------------------------------

Test 2: Testing integer_validator with a valid object and arguments

>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)
>>>

---------------------------------------------------------------------------------

Test 3: Testing integer_validator with valid object, int, and an empty string
passed to @name

>>> bg.integer_validator("", 89)
>>>

---------------------------------------------------------------------------------

Test 4: Testing integer_validator with valid object, int, and None passed to @name

>>> bg.integer_validator(None, 89)
>>>

---------------------------------------------------------------------------------

Test 5: Testing integer_validator with valid object, and string passed to @value

>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
	  ...
TypeError: name must be an integer
>>>

---------------------------------------------------------------------------------
Test 6: Testing integer_validator with 0 passed to @value

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
          ...
ValueError: age must be greater than 0
>>>

---------------------------------------------------------------------------------

Test 7: Testing integer_validator with a negative number passed to @value

>>> bg.integer_validator("age", -15)
Traceback (most recent call last):
          ...
ValueError: age must be greater than 0
>>>

---------------------------------------------------------------------------------

Test 8: Testing integer_validator with a list passed to @value

>>> bg.integer_validator("age", [28])
Traceback (most recent call last):
          ...
TypeError: age must be an integer
>>>

---------------------------------------------------------------------------------

Test 9: Testing integer_validator with a tuple passed to @value

>>> bg.integer_validator("age", (35, 30))
Traceback (most recent call last):
          ...
TypeError: age must be an integer
>>>

---------------------------------------------------------------------------------

Test 10: Testing integer_validator with a dictionary passed to @value

>>> bg.integer_validator("age", {"name": "John"})
Traceback (most recent call last):
          ...
TypeError: age must be an integer
>>>

---------------------------------------------------------------------------------

Test 11: Testing integer_validator with a set passed to @value

>>> bg.integer_validator("age", {3, 4})
Traceback (most recent call last):
          ...
TypeError: age must be an integer
>>>

---------------------------------------------------------------------------------

Test 12: Testing integer_validator with a Boolean passed to @value

>>> bg.integer_validator("age", True)
Traceback (most recent call last):
          ...
TypeError: age must be an integer
>>>

---------------------------------------------------------------------------------

Test 13: Testing integer_validator with None passed to @value

>>> bg.integer_validator("age", None)
Traceback (most recent call last):
          ...
TypeError: age must be an integer
>>>

---------------------------------------------------------------------------------
